//GLSL

uniform vec2 mousePos;
uniform float time;
float FuncSin(vec2 point)
{
	return (0.25*sin(50.0*(point.x + point.y)));
}
float FuncCos(vec2 point)
{
	return (0.25*cos(50.0*(point.x + point.y)));
}

float Func(vec2 point)
{
	return (-(point.x*point.x + point.y*point.y));
}

float Func(vec3 point)
{
	if ((FuncSin(point.xy) - point.z) == 0)
	{
		return (0.0);
	}

	if ((FuncSin(point.xy) - point.z) > 0)
	{
		return (-1.0);
	}

	if ((FuncSin(point.xy) - point.z) < 0)
	{
		return (1.0);
	}
	
}



struct CastRes
{
	vec3 point;
	vec3 normal;
	bool exist;

};
CastRes GetFuncCast(vec3 rayOrigin, vec3 rayDir, float param, vec3 eps)
{
	CastRes res;
	/*vec3 funcPoint = vec3(rayOrigin.xy, FuncSin(rayOrigin.xy));
	if (((rayOrigin + rayDir * param  + eps).z - (funcPoint).z <= 0) && ((rayOrigin + rayDir * param).z - (funcPoint).z >= 0))
	{
		res.exist = true;
		res.point = rayOrigin + rayDir * param;
		res.normal = normalize(vec3(10.0*FuncCos(res.point.xy), 10.0*FuncCos(res.point.xy), -1.0)); //!!!!!!!!!!!!!!!???????????????????????
		return res;
	}*/
	if (Func(rayOrigin + rayDir * param - vec3(0.0, 0.0, eps.z)) <= 0.0 && Func(rayOrigin + rayDir * param) >= 0.0)
	{
		res.exist = true;
		res.point = rayOrigin + rayDir * param;
		//res.normal = normalize(rayOrigin + rayDir * param);
		res.normal = normalize(vec3(10.0*FuncCos(res.point.xy), 10.0*FuncCos(res.point.xy), -1.0)); //!!!!!!!!!!!!!!!???????????????????????
		return res;
	}
	else
	{
		res.exist = false;
		return res;

	}

}

struct LightPoint
{
	vec3 geomPos;
	vec3 normal;
	vec3 color;
	bool resExist;
};
LightPoint GetCrossPoint(vec3 rayDir, vec3 rayOrigin, float param, float paramStep, vec3 eps)
{
	LightPoint pt;
	vec3 geomPosition;
	CastRes res = GetFuncCast(rayOrigin, rayDir, param, eps);
	for (int i = -100; i < 100; i++)
	{
		res = GetFuncCast(rayOrigin, rayDir, param, eps);
		if (res.exist && (dot(geomPosition, rayDir) > dot(res.point, rayDir)))
		{
			pt.geomPos = res.point;
			pt.normal = res.normal;
			pt.color = vec3(1.0, 1.0, 0.0);
			pt.resExist = true;
			break;
			//gl_FragColor = vec4(color, 1.0);
		}
		else
		{
			gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
			pt.resExist = false;
		}
		//texCoord = texCoord + vec3(0.0, 0.0, -epsMove);
		param = param + paramStep;

	}
	
	return pt;
}

void LightThisShit(LightPoint pt, vec2 mousePos, vec2 windowSize, vec3 normal)
{
	if (pt.resExist)
	{
		vec3 lightPos = vec3(mousePos / windowSize, 1.0);


		vec3 lightDir = normalize(pt.geomPos - lightPos);

		float diffuse = max(0.0, (dot(-normal, -lightDir))); //scalar multipl
		vec3 lightColor = vec3(1.0, 1.0, 1.0);

		gl_FragColor.rgba = vec4(pt.color *
			lightColor * (diffuse * 0.5 + 0.2), 1.0);

	}
	else
	{
		if(pt.geomPos.z < 0.0)
		gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);

	}
}


void main()
{
	vec2 windowSize = vec2(1200.0, 660.0);
	vec2 texCoord = vec2(gl_FragCoord.xy / windowSize);

	vec3 rayOrigin = vec3(texCoord, 1.0);
	vec3 rayDir = vec3(0.0, 0.0, -1.0);

	
	
	vec3 eps = vec3(0.01, 0.01, 0.01);
	float param = 0.01;
	float paramStep = 0.01;
	
	
	
	CastRes res = GetFuncCast(rayOrigin, rayDir, param, eps);

	LightPoint pt = GetCrossPoint(rayDir, rayOrigin, param, paramStep, eps);

	LightThisShit(pt, mousePos, windowSize, pt.normal);

	/*if (Func(rayOrigin + rayDir/0.9) >= 0)
	{
		gl_FragColor.rgba = vec4(1.0, 0.0, 0.0, 1.0);
	}
	if (Func(rayOrigin + rayDir / 0.9) < 0)
	{
		gl_FragColor.rgba = vec4(0.0, 1.0, 0.0, 1.0);
	}*/
	

}